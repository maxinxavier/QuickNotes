
cp /etc/passwd ./textf

pattern {action}

awk '/Defined/'{print $1}'
awk -F "," '{print $1}'

awk -F ":" '{print $1}' < /textf
awk -F ":" /guest/'{print $3}'  < /textf
awk -F ":" '/guest/{print $3}' < /textf


COMPARISON
<	less than
<=	less than or equal to
>	greater than
>=	greater than or equal to
==	equal to
!=	not equal to
~	matches
!~	deos not mach

awk -F ":" '$1=="root"{print $1}' < textf		:Search for exact word root
awk -F ":" '$1!="root"{print $1}' < textf		:Anything not having exact root
awk -F ":" '$1!~"root"{print $1}' < textf		:Search for any word having pattern root
awk -F ":" '$1~"root"{print $1}'  < textf		:Search for words that does not have pattern root


awk -F ":" '$3<100{print $1,$3}'  < textf
awk -F ":" '$3>100{print $1,$3}'  < textf
awk -F ":" '$3==100{print $1,$3}' < textf
awk -F ":" '$3!=100{print $1,$3}' < textf
awk -F ":" '$3~100{print $1,$3}'  < textf
awk -F ":" '$3!~100{print $1,$3}' < textf
awk -F ":" '$3!~100{printf("USer with non-100 id are : %s\n",$1);}'  < textf
awk -F ":" '$3!~100{printf("USer with non-100 id are :"); print $1}' < textf
awk -F ":" '$3!~100{printf("USer with non-100 id are : %s\t\t And ID is :%d\n",$1,$3)}' < textf
awk -F ":" '$3~100{printf("USer with 100 id are : %s\t\t And ID is :%d\n",$1,$3);}'  < textf


%[n]s	Print a text string
%[n]d	Print a numeric value
\n	Print a New Line
\t	Print a TAB

BEGIN 
END
NR	Current Input Line number
NF	Number of fields in the Input Line

awk -F ":" 'BEGIN {print "This is a sample BEGIN \n\n"} $3~100{printf("USer with 100 id are : %s\t\t  And ID is :%d\n",$1,$3)}' < textf
awk -F ":" '{for (field=1;field<=NF;field+=1) print ($field)}' < textf
awk -F "," '{for (field = 1;field<=NF;field+=1) print($field)}'  < profileNORMAL
awk -F "," '{for (field = 1;field<=NF;field+=1) print($field)}'  <  profileCURRENT
awk -F "," '{ for (field = 1; field <=NF;field+=1) printf("%s\t", $field)}' < profileCURRENT
awk -F ":" 'BEGIN {printf "The number of LINEs are : " } END {print NR } ' < textf

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

^	Matches the first character of a string
$	Matches the last character of a string
.	Matches a single character of a string
[ ]	Defines a set of characters
( )	Used for grouping
|	Specifies alternatives
[^..]	Negates the search
\	Escape characters
\b	BAckspace
\f	Formfeed
\r	Carriage return
\t	Tab
\"	Double qoutes


awk -F ":" '/(root|lpd|adm)/{print $1,"\t",$3}' 	< textf
awk -F ":" '$1~/(root|lpd|adm)/{print $1,"\t",$3}' 	< textf
awk -F ":" '$1~/^r+[a-z]+t$/ {print $1,"\t",$2}' 	< textf
awk -F ":" '$1~/^R/{print $1,"\t",$2}' 			< textf
awk -F ":" '$1~/^[rR]/{print $1,"\t",$2}' 		< textf
awk -F ":" '$1~/^[rR]+[tT]$/{print $1,"\t",$2}' 	< textf
awk -F ":" '$1~/^[rR]+[a-z]+[tT]$/{print $1,"\t",$2}' 	< textf
awk -F ":" '$1~/^[rR]+[a-z,A-Z]+[tT]$/{print $1,"\t",$2}' < textf

--------------------------------------------------------------------------------------------------------------------------------------------
||	Logical OR  / Either pattern can match
&&	Logical AND / Both pattern must match
!	Logical NOT / Petterns NOT matching 


awk -F ":" '$3>100 && $4>100 {print $1,"\t",$3"\t",$4}' < textf
awk -F ":" '$3>100 || $4>100 {print $1,"\t",$3"\t",$4}' < textf

-----------------------------------------------------------------------------------

ARGC		Number of command-line arguments
ARGV		Array of commandline arguments
FILENAME	Name of current input line
FNR		Record number in current file
FS		Input field separator. Default is sapce & tab 
NF		Number of Fileds in input line
NR		Number of input Lines red so far
OFMT		Output Format for Numbers.Default is %.6
OFS		Output Field Seperator. default is space
ORS		Output Line Seperator. default is NEW LINE
RS		Input Line Separator. default is NEW LINE
RSTART		Index of first character matched by match()
RLENGTH		Length of string matched by match()
SUBSEP		Subscript separator. default is "\034"

awk -F ":" 'OFS="\t" {print $1,$3,$5}' < textf
awk -F ":" 'FNR==1,FNR==4{print $1,$3}' < textf
awk -F ":" 'BEGIN {print "Number","\t","Name","\t\t","ID" } {print NR,"\t",$1,"\t\t",$3}' < textf
awk 'BEGIN {FS=":"} {print $1,$2}' < textf
awk 'BEGIN {FS=":"; OFS="\t"}{print $1,$2}' < textf

du -sm *  |sort -nr | head -14 | awk 'OFS=";",ORS=";"{print $2}'

-----------------------------------------------------------------------------------------------------------------------

+	Add
-	Subtract
*	Multiply
/	Divide
%	Modulus
++	Increment
--	Decrement
^	Exponential
+=	Plus equals
-=	Minus equals
*=	Multiply equals
/=	Divide equals
%=	Modulus equals
^=	Modulus equals

atan2(y,x)	Arctangent of y/x in radians
cos(x)		Cosine of x,with x in radians
sin(x)		Sine of x , with x in radians
int(x)		Integer part of x truncated towards 0
log(x)		Natural logarithm of x
rand()		Random number between 0 and 1
sqrt(x)		Square root of x
srand(x)	x is new seed for rand()
exp(x)		Exponential funcation of x

echo "6" | awk '{print sqrt($1)}'


gsub(r,s)       substitutes s for r globally in current input line, returns the  number of substitutions 
gsub(r,s,t)     substitutes s for r in t globally, returns number of substitutions 
index(s,t)      returns position of string t in s, 0 if not present 
length(s)       returns length of s 
match(s,r)      returns position in s where r occurs, 0 if not present 
split(s,a)      splits s into array a on FS, returns number of fields 
split(s,a,r)    splits s into array a on r, returns number of fields 
sprintf(fmt, expr-list) returns expr-list formatted according to format string  specified by fmt 
sub(r,s)        substitutes s for first r in current input line, returns number of substitutions 
sub(r,s,t)      substitutes s for first r in t, returns number of substitutions 
substr(s,p)     returns suffix s starting at position p 
substr(s,p,n)   returns substring of s length n starting at position p 

awk -F ":" '{gsub(/root/,"MAXIN")}{print $1}' < textf

-------------------------------------------------------------------------------------------------------------------------------------

Control Flow Statements 
        if ( expr)  statement [ else statement] 
        if ( subscript  in  array)  statement [ else  statement] 
        while ( expr)  statement 
        for ( expr;  expr ;  expr )  statement 
        for (  var  in  array )  statement 
        do statement  while ( expr) 
        break 
        continue 
        next 
        exit [ expr] 
        return [ expr] 

awk  '{FS=":"} {if ($3>100) { count1++ } else {count2++ }} END {print count1,count2}' < textf
awk -F ":" '{ if($3>100) { print NR,"Above Hundred. And UID = ",$3}}' < textf
awk -F ":" '{ if($3>100) { print NR,"AAAAAAH. And UID = ",$3} else { print NR,"BBBBBBBBH. And UID = ",$3}}' < textf
awk -F ":" '{ if($3>100) { AHND++} else {BHND++}} END {print "Above hundred are : " ,AHND, "Below hundred are : ",BHND }' < textf

awk -F ":" '{ if($3>100) { AHND++} else {BHND++}} ' < textf
awk -F ":" '{ if($3>100) { AHND++} else {BHND++}} {print AHND,BHND} ' < textf
awk -F ":" '{ if($3>100) { AHND++} else {BHND++}} {print "Above Hundred are : ", AHND,BHND} ' < textf
awk -F ":" '{ if($3>100) { AHND++} else {BHND++}} {print "Above Hundred are : ", AHND,"Below Hundred are : ",BHND} ' < textf
awk -F ":" '{ if($3>100) { AHND++} else {BHND++}} END  {print "Above Hundred are : ", AHND,"Below Hundred are : ",BHND} ' < textf

awk -F ":" '{ if($3>100 && $3<300) { AHND++} else {if($3>300) {ATHND++} else {BHND++}}} END {print "Above 100 are :", AHND, "Above 300 are :", ATHND,"Below 100 are :",BHND }' <textf


awk '{FS=":";OFS="\t"}{ while($3>100)  {print $1,$3;next}}' < textf
awk '{FS=":";OFS="\t"}{ while($1~/adm/){print $1,$3;next}}' < textf
awk '{FS=":";OFS="\t"}{ while($1~/adm/ || $3<100){print $1,$3;next}}' < textf
awk '{FS=":";OFS="\t"}{ while($1~/adm/ || $3<100){COUNT++ ; next}{print COUNT}}' < textf
awk '{FS=":";OFS="\t"}{ while($1~/adm/ || $3<100){COUNT++ ; next}} END {print COUNT}' < textf


c       single character 
d       decimal integer 
e       double number, scientific notation 
f       floating point number 
g       use e or f, whichever is shortest 
o       octal 
s       string 
x       hexadecimal 
%       the % symbol


Limits 
Each implementation of awk imposes some limits. Below are typical limits 
        100 fields 
        2500 characters per input line 
        2500 characters per output line 
        1024 characters per individual field 
        1024 characters per printf string 
        400 characters maximum quoted string 
        400 characters in character class 
        15 open files 
        1 pipe 

Input Output 
        close(  filename )              close file 
        getline                         set $0 form next input line, set NF, NR, FNR 
        getline <  file                 set $0 from next input line of file, set NF 
        getline var                     set var from next input line, net NR, FNR 
        getline var <  file             set var from next input line of file 
        print                           print current input line 
        print expr-list                 print expressions 
        print expr-list >  file         print expressions to file 
        printf fmt, expr-list           format and print 
        printf fmt, expr-list  >  file  format and print to file 
        system( cmd-line )              execute command cmd-line, return status 

EXAMPLES      # is the comment character for awk.  'field' means 'column'

# Print first two fields in opposite order:
  awk '{ print $2, $1 }' file


# Print lines longer than 72 characters:
  awk 'length > 72' file
    

# Print length of string in 2nd column
  awk '{print length($2)}' file


# Add up first column, print sum and average:
       { s += $1 }
  END  { print "sum is", s, " average is", s/NR }


# Print fields in reverse order:
  awk '{ for (i = NF; i > 0; --i) print $i }' file


# Print the last line
      {line = $0}
  END {print line}


# Print the total number of lines that contain the word Pat
  /Pat/ {nlines = nlines + 1}
  END {print nlines}


# Print all lines between start/stop pairs:
  awk '/start/, /stop/' file


# Print all lines whose first field is different from previous one:
  awk '$1 != prev { print; prev = $1 }' file


# Print column 3 if column 1 > column 2:
  awk '$1 > $2 {print $3}' file
     

# Print line if column 3 > column 2:
  awk '$3 > $2' file


# Count number of lines where col 3 > col 1
  awk '$3 > $1 {print i + "1"; i++}' file


# Print sequence number and then column 1 of file:
  awk '{print NR, $1}' file


# Print every line after erasing the 2nd field
  awk '{$2 = ""; print}' file


# Print hi 28 times
  yes | head -28 | awk '{ print "hi" }'


# Print hi.0010 to hi.0099 (NOTE IRAF USERS!)
  yes | head -90 | awk '{printf("hi00%2.0f \n", NR+9)}'


# Replace every field by its absolute value
  { for (i = 1; i <= NF; i=i+1) if ($i < 0) $i = -$i print}

# If you have another character that delimits fields, use the -F option
# For example, to print out the phone number for Jones in the following file,
# 000902|Beavis|Theodore|333-242-2222|149092
# 000901|Jones|Bill|532-382-0342|234023
# ...
# type
  awk -F"|" '$2=="Jones"{print $4}' filename
# Some looping for printouts
  BEGIN{
	for (i=875;i>833;i--){
		printf "lprm -Plw %d\n", i
	} exit
       }
Formatted printouts are of the form printf( "format\n", value1, value2, ... valueN)
		e.g. printf("howdy %-8s What it is bro. %.2f\n", $1, $2*$3)
	%s = string
	%-8s = 8 character string left justified
 	%.2f = number with 2 places after .
	%6.2f = field 6 chars with 2 chars after .
	\n is newline
	\t is a tab


# Print frequency histogram of column of numbers
$2 <= 0.1 {na=na+1}
($2 > 0.1) && ($2 <= 0.2) {nb = nb+1}
($2 > 0.2) && ($2 <= 0.3) {nc = nc+1}
($2 > 0.3) && ($2 <= 0.4) {nd = nd+1}
($2 > 0.4) && ($2 <= 0.5) {ne = ne+1}
($2 > 0.5) && ($2 <= 0.6) {nf = nf+1}
($2 > 0.6) && ($2 <= 0.7) {ng = ng+1}
($2 > 0.7) && ($2 <= 0.8) {nh = nh+1}
($2 > 0.8) && ($2 <= 0.9) {ni = ni+1}
($2 > 0.9) {nj = nj+1}
END {print na, nb, nc, nd, ne, nf, ng, nh, ni, nj, NR}


# Find maximum and minimum values present in column 1
NR == 1 {m=$1 ; p=$1}
$1 >= m {m = $1}
$1 <= p {p = $1}
END { print "Max = " m, "   Min = " p }

# Example of defining variables, multiple commands on one line
NR == 1 {prev=$4; preva = $1; prevb = $2; n=0; sum=0}
$4 != prev {print preva, prevb, prev, sum/n; n=0; sum=0; prev = $4; preva = $1; prevb = $2}
$4 == prev {n++; sum=sum+$5/$6}
END {print preva, prevb, prev, sum/n}

# Example of using substrings
# substr($2,9,7) picks out characters 9 thru 15 of column 2
{print "imarith", substr($2,1,7) " - " $3, "out."substr($2,5,3)}
{print "imarith", substr($2,9,7) " - " $3, "out."substr($2,13,3)}
{print "imarith", substr($2,17,7) " - " $3, "out."substr($2,21,3)}
{print "imarith", substr($2,25,7) " - " $3, "out."substr($2,29,3)}
